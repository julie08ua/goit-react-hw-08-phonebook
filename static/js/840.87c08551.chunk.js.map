{"version":3,"file":"static/js/840.87c08551.chunk.js","mappings":"yQAEaA,EAAeC,EAAAA,GAAAA,GAAH,iEAKZC,EAASD,EAAAA,GAAAA,OAAH,4Q,SCFNE,EAAe,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,IAErBC,EACFL,EAASG,QAAO,qBAAGG,KACVC,cAAcC,SAASL,EAAOI,cADvB,IAIpB,OACI,wBACKF,EAAeI,KAAI,gBAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,OAAb,OAChB,UAACjB,EAAD,WACKY,EAAK,KAAGK,GAET,SAACf,EAAD,CACIgB,KAAK,SACLC,QAAS,kBAAMf,GAASgB,EAAAA,EAAAA,IAAcJ,GAA7B,EAFb,SAGC,aANcA,EADH,KAc/B,E,UC9BYK,EAAQpB,EAAAA,GAAAA,MAAH,8MAWLqB,EAAOrB,EAAAA,GAAAA,EAAH,4CAIJC,EAASD,EAAAA,GAAAA,OAAH,gVCXNsB,EAAc,WACvB,IAAMnB,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IA0B7B,OACI,kBAAMgB,SAzBW,SAAAC,GACjBA,EAAEC,iBACF,MAAwBD,EAAEE,cAAlBf,EAAR,EAAQA,KAAKK,EAAb,EAAaA,OACPW,EAAOH,EAAEI,OAETC,EAAU,CACZlB,KAAMA,EAAKmB,MACXd,OAAQA,EAAOc,MACff,IAAIgB,EAAAA,EAAAA,OAGFC,EAAY3B,EAAS4B,MACvB,SAAAJ,GAAO,OAAIA,EAAQlB,KAAKC,gBAAkBD,EAAKmB,MAAMlB,aAA9C,IAGPoB,EACAE,MAAM,GAAD,OAAIvB,EAAKmB,MAAT,6BAEL3B,GAASgC,EAAAA,EAAAA,IAAWN,IAGxBF,EAAKS,OACR,EAGG,WACI,8BACI,SAACf,EAAD,UAAM,UACN,SAACD,EAAD,CACIH,KAAK,OACLN,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIhB,8BACI,SAAClB,EAAD,UAAM,YACN,SAACD,EAAD,CACIH,KAAK,MACLN,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIhB,SAAC,EAAD,CAAQtB,KAAK,SAAb,SAAsB,kBAGjC,EC3DYG,EAAQpB,EAAAA,GAAAA,MAAH,sL,UCGLwC,EAAS,WAClB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXqC,GAAcnC,EAAAA,EAAAA,IAAYG,EAAAA,IAMhC,OACI,8BACA,uBAAG,2BACH,SAAC,EAAD,CACIQ,KAAK,OACLN,KAAK,SACLmB,MAAOW,EACPC,SAXa,SAAC,GAAgB,IAAdd,EAAa,EAAbA,OACpBzB,GAASwC,EAAAA,EAAAA,GAAef,EAAOE,OAClC,MAYJ,ECfc,SAASc,IACpB,IAAMzC,GAAWC,EAAAA,EAAAA,MAMjB,OAJAyC,EAAAA,EAAAA,YAAU,WACN1C,GAAS2C,EAAAA,EAAAA,MACZ,GAAE,CAAC3C,KAGA,iCACI,SAAC4C,EAAA,EAAD,WACI,2BAAO,qBAEX,wBAAI,eACH,SAACzB,EAAD,KACD,wBAAI,eACH,SAACkB,EAAD,KACD,SAACtC,EAAD,MAGX,C","sources":["components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactsItem = styled.li`\n  margin-top: 10px;\n  font-size: 24px;\n`;\n\nexport const Button = styled.button`\n  margin: 5px 10px;\n  font-size: 18px;\n  border-radius: 7px;\n  cursor: pointer;\n  transition: background-color 250ms linear;\n  border: 0;\n  box-shadow: 0 1px 6px 0 #20212447;\n  color:grey;\n\n  &:hover {\n    background-color: #a1c6cf;\n`;\n","import { useDispatch, useSelector} from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { ContactsItem, Button} from './ContactList.styled';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactsList = () => {\n    const dispatch = useDispatch();\n\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n\n    const visibleContact =\n        contacts.filter(({ name }) =>\n            name.toLowerCase().includes(filter.toLowerCase())\n    );\n    \n    return (\n        <ul>\n            {visibleContact.map(({ id, name, number }) => (\n                <ContactsItem key={id}>\n                    {name}: {number}\n\n                    <Button\n                        type=\"button\"\n                        onClick={() => dispatch(deleteContact(id))}\n                    >\n                        Delete\n                    </Button>\n                </ContactsItem>\n            ))}\n        </ul>\n    );\n}","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 10px;\n  margin-bottom: 10px;\n  font-size: 24px;\n  border-radius: 6px;\n  border: none;\n  outline: 0;\n  background-color: #fff;\n  box-shadow: 0 1px 6px 0 #20212447;\n`;\n\nexport const Text = styled.p`\n  font-size: 24px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  width: fit-content;\n  margin-top: 10px;\n  border-radius: 7px;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 5px 10px;\n  transition: background-color 250ms linear;\n  border: 1px solid grey;\n  box-shadow: 0 1px 6px 0 #20212447;\n\n  &:hover {\n    background-color: #a1c6cf;\n    \n`;","import { nanoid } from '@reduxjs/toolkit';\nimport {Input, Button,Text} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const { name,number } = e.currentTarget;\n        const form = e.target;\n\n        const contact = {\n            name: name.value,\n            number: number.value,\n            id: nanoid(),\n        };\n\n        const checkName = contacts.find(\n            contact => contact.name.toLowerCase() === name.value.toLowerCase()\n        );\n        \n        if (checkName) {\n            alert(`${name.value} is already in contacts.`);\n        } else {\n            dispatch(addContact(contact));\n          }\n\n        form.reset();\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                <Text>Name</Text>\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n\n            <label>\n                <Text>Number</Text>\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    />\n            </label>\n                \n            <Button type=\"submit\">Add contact</Button>\n        </form>\n    );\n}","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  padding: 10px;\n  font-size: 24px;\n  border-radius: 6px;\n  border: none;\n  outline: 0;\n  background-color: #fff;\n  box-shadow: 0 1px 6px 0 #20212447;\n`;\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input } from './Filter.styled';\nimport { setValueFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const valueFilter = useSelector(selectFilter);\n\n    const changeFilter = ({ target }) => {\n        dispatch(setValueFilter(target.value));\n    };\n\n    return (\n        <label>\n        <p>Find contacts by name</p>\n        <Input\n            type=\"text\"\n            name=\"filter\"\n            value={valueFilter}\n            onChange={changeFilter} />\n        </label>\n    )\n};","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/operations';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Your contacts</title>\n            </Helmet>\n            <h1>Phonebook</h1>\n             <ContactForm />\n            <h2>Contacts:</h2> \n             <Filter />\n            <ContactsList />\n        </>\n    );\n};"],"names":["ContactsItem","styled","Button","ContactsList","dispatch","useDispatch","contacts","useSelector","selectContacts","filter","selectFilter","visibleContact","name","toLowerCase","includes","map","id","number","type","onClick","deleteContact","Input","Text","ContactForm","onSubmit","e","preventDefault","currentTarget","form","target","contact","value","nanoid","checkName","find","alert","addContact","reset","pattern","title","required","Filter","valueFilter","onChange","setValueFilter","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}